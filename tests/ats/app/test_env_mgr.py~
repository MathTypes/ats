import math
import logging
import unittest.mock as mock

import hydra
import numpy as np
from omegaconf import DictConfig
import pandas as pd
import torch

import pandas_market_calendars as mcal

from hydra import initialize, compose
from omegaconf import OmegaConf

from ats.app.env_mgr import EnvMgr
from ats.market_data import market_data_mgr
from ats.model import model_utils
from ats.trading.trader import Trader
from ats.util import logging_utils


# THe config path is relative to the file calling initialize (this file)
def test_get_snapshot():
    pytest_plugins = ['pytest_profiling']
    pd.set_option("display.max_columns", None)
    pd.set_option("display.max_rows", None)
    with initialize(version_base=None, config_path="../../../conf"):
        cfg = compose(config_name="test_dev", overrides=["job.train_start_date=2009-06-01",
                                                         "job.eval_start_date=2009-06-04",
                                                         "job.eval_end_date=2009-06-10",
                                                         "job.test_start_date=2009-06-04",
                                                         "job.eval_end_date=2009-06-10",
                                                         "dataset.snapshot=''",
                                                         "dataset.write_snapshot=False"])
        env_mgr = EnvMgr(cfg)
        md_mgr = market_data_mgr.MarketDataMgr(env_mgr)
        market_cal = md_mgr.market_cal
        #wandb_logger = WandbLogger(project="ATS", log_model=True)
        wandb_logger = None
        raw_data = md_mgr.get_snapshot()
        first_data_row = raw_data.loc[raw_data.timestamp==]
        # 2008-02-07 08:30:00 - we need 201 prior intervals. Each day
        # has about 40 intervals. It is strange why we go to 2008-02-07 instead
        # of 2008-01-10.
        logging.error(f"train_data start:{raw_data[:5]}")
        logging.error(f"train_data end:{raw_data[-5:]}")
        assert first_data_row["timestamp"] == 1202391000
